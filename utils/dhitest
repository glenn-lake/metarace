#!/usr/bin/python3
#
# display 24x7 Caprica/DHI scoreboard emulator on terminal
#
# Imports
import queue
import threading
import time
import socketserver
import socket
import os
import sys
import math
import unicodedata
from metarace import unt4

# Display properties
DEFPORT = 2004 - 58		# Caprica/DHI port "58 years before the fall"

# TCP/IP message receiver and socket server
socketserver.TCPServer.allow_reuse_address = True
socketserver.TCPServer.request_queue_size = 4
class recvhandler(socketserver.BaseRequestHandler):
    def handle(self):
        """Receive message from TCP"""
        data = b''
        while True:
            nd = self.request.recv(64)
            if len(nd) == 0:
                break
            data += nd
            while unt4.SOH[0] in data:
                (buf, sep, data) = data.partition(unt4.SOH)
                data = sep + data
                if unt4.EOT[0] in data:
                    (buf, sep, data) = data.partition(unt4.EOT)
                    mstr = (buf+unt4.EOT).decode('utf-8','ignore')
                    m = unt4.unt4(unt4str=mstr)
                    if self.server.tbh is not None and m is not None:
                        self.server.tbh.update(m)
                else:
                    break

            # check if there's too much garbage in the stream
            if len(data) > 200:
                data = b''

class receiver(socketserver.ThreadingMixIn, socketserver.TCPServer):
    def set_tableau(self, th=None):
        self.tbh = th

# Graphic renderer
class tableau(threading.Thread):
    def __init__(self, x, y):
        threading.Thread.__init__(self)
        self.running = False
        self.__q = queue.Queue(maxsize=128)
        self.__cols = x
        self.__rows = y
        self.t = []
        for j in range(0,y):
            nr = []
            for i in range(0,x):
                nr.append('X')
            self.t.append(nr)

    def update(self, msg=None):
        """Queue a tableau update."""
        try:
            self.__q.put_nowait(msg)
        except queue.Full:
            print('caprica: Message queue full, discarded message')
            return None

    def __erase_page(self):
        for j in range(0,self.__rows):
            for i in range(0, self.__cols):
                self.t[j][i] = ' '

    def __place_char(self, c=' ', xx=0, yy=0):
        if xx < self.__cols and yy < self.__rows:
            self.t[yy][xx] = c
        else:
            pass
            #print('error: invalid offsets')

    def __show_text(self, msg=None):
        """Update text frame and send to display."""
        ret = False
        if isinstance(msg, unt4.unt4):
            dirty = False
            if msg.erp:
                # General clearing
                ret = True
                dirty = True
                self.__erase_page()
            elif msg.yy is not None:
                # Positioned text
                ret = True
                vo = msg.yy
                ho = msg.xx
                if msg.yy > 1:	# all non-headers are upper-cased
                    msg.text = msg.text.upper() # THIS MAY NOT BE THE SAME LEN
                for c in msg.text:
                    self.__place_char(c, ho, vo)
                    ho += 1
                    dirty = True
                if msg.erl:
                    while ho < self.__cols:
                        self.__place_char(' ', ho, vo)
                        ho += 1
                    dirty = True
            if dirty:
                print(' ')
                print(' +------------------------+')
                for j in self.t:
                    print(' |' + ''.join(j) + '|')
                print(' +------------------------+')
        return ret
        
    def run(self):
        self.running = True
        while self.running:
            try:
                m = self.__q.get(timeout=2.0)
                self.__q.task_done()
                if m is None:
                    pass
                    # Process a clock tick notification
                    #self.__lu += 1
                    #if self.__lu > TIMEOUT:
                        #self.__show_clock()
                else:
                    # Process a text update
                    if self.__show_text(m):
                        self.__lu = 0	# reset counter
            except queue.Empty:
                pass
            except Exception as e:
                print('caprica: Tableau exception: ' + repr(e))
                running = False

def main():
    # Create tableau helper thread
    tbl = tableau(24,7)
    tbl.start()

    # Create dhi socket server helper thread
    dhi = receiver(('0.0.0.0', DEFPORT), recvhandler)
    dhi.set_tableau(tbl)
    dhi_thread = threading.Thread(target=dhi.serve_forever)
    dhi_thread.daemon = True
    dhi_thread.start()

    try:
        while True:
            time.sleep(10)
    finally:
        tbl.running = False
        dhi.shutdown()

if __name__ == '__main__':
    main()

