#!/usr/bin/python3
#
# Trivial single line text console for (eg) hour record lap times
#
# Configuration options (in metarace.json):
#
#  datakey (string): telegraph topic to use for source text
#                    default: 'laptime'
#  blanktime (tod): blank screen if no update in this long
#                   default: 30 (0 to disable)
#  fullscreen (bool): make app fullscreen after startup
#                     default: True
#  startmsg (string): string to display on startup
#                     default: '00.00'
#  template (string): string that describes the desired message width
#                     default: startmsg
#

import gi
import logging
import metarace
from metarace import telegraph
from metarace import tod

gi.require_version("GLib", "2.0")
from gi.repository import GLib
gi.require_version("Gtk", "3.0")
from gi.repository import Gtk
gi.require_version("Gdk", "3.0")
from gi.repository import Gdk

DEFKEY = 'laptime'
DEFBLANK = 30
DEFSCREEN = True
STARTMSG = '00.00'
HFRAC = 0.60
WFRAC = 0.90

logging.basicConfig()

# font CSS
LBLFONT = b'* { font-weight: bold; font-family: "Tex Gyre Heros Cn"; }'

# main window object
class laptrack(Gtk.Window):
    def __init__(self):
        Gtk.Window.__init__(self, title="Laptrack")
        self.set_default_size(400,300)

        self.label = Gtk.Label()
        self.label.set_single_line_mode(True)
        self.add(self.label)
 
        # Create a temporary provider to style the label font
        p = Gtk.CssProvider()
        p.load_from_data(LBLFONT)
        self.label.get_style_context().add_provider(p,
                         Gtk.STYLE_PROVIDER_PRIORITY_USER)

        # Create and save a provider to alter the label font-size
        self.label_size = Gtk.CssProvider()
        self.label_size.load_from_data(b'* { font-size: 100px; }')
        self.label.get_style_context().add_provider(self.label_size,
                         Gtk.STYLE_PROVIDER_PRIORITY_USER)

        # read configuration from system
        self.datakey = DEFKEY
        if metarace.sysconf.has_option('laptrack', 'datakey'):
            self.datakey = metarace.sysconf.get('laptrack', 'datakey')
        self.blanktime = tod.mktod(DEFBLANK)
        if metarace.sysconf.has_option('laptrack', 'blanktime'):
            bt = tod.mktod(metarace.sysconf.get('laptrack', 'blanktime'))
            if bt is not None:
                self.blanktime = bt
        sm = STARTMSG
        if metarace.sysconf.has_option('laptrack', 'startmsg'):
            sm = metarace.sysconf.get('laptrack', 'startmsg')
        self.template = sm
        if metarace.sysconf.has_option('laptrack', 'template'):
            nt = metarace.sysconf.get('laptrack', 'template')
            if nt:
                self.template = nt
        self.fs = DEFSCREEN
        if metarace.sysconf.has_option('laptrack', 'fullscreen'):
            self.fs = metarace.sysconf.get('laptrack', 'fullscreen')

        # use template text to determine the layout parameter
        self.label.set_text(self.template)
        (w, h) = self.label.get_layout().get_pixel_size()
        self.aspect = w / 100.0
        self.resize_label()

        # initialise the lu and set the start message
        self.lu = None
        self.update_label(sm)

        # create telegraph I/O object and callback
        self.t = telegraph.telegraph()
        self.t.setcb(self.io_msg)

        # subscribe to datakey source
        self.t.subscribe(self.datakey)

        # connect the configure event handler
        self.connect('configure-event', self.reconfigure_screen)

    def resize_label(self):
        """Resize label font to fit neatly into window."""
        (w, h) = self.get_size()
        newsz = int(min(WFRAC * w / self.aspect, HFRAC * h))
        css = '* {{ font-size: {0:0d}px; }}'.format(newsz)
        self.label_size.load_from_data(css.encode('utf-8'))

    def reconfigure_screen(self, widget, event):
        """Re-size label on window change."""
        self.resize_label()

    def update_label(self, msg):
        """Write message into label and record update time."""
        self.label.set_text(msg)
        self.lu = tod.now()

    def io_msg(self, topic, message):
        """Receive message from telegraph and dispatch to main loop."""
        if topic == self.datakey:
            ntxt = ''
            if message:
                ntxt = message
            GLib.idle_add(self.update_label,ntxt)
    
    def start_io(self):
        """Start telegraph connection."""
        self.t.start()

    def timeout(self, data=None):
        """Blank message after delay if configured."""
        if self.lu is not None and self.blanktime is not None:
            if self.blanktime > 0:
                nt = tod.now()
                if nt-self.lu > self.blanktime:
                    self.update_label('')
        return True

    def maxitup(self, data=None):
        """Make window full screen if configured and blank mouse pointer."""
        if self.fs:
            self.fullscreen()
        cursor = Gdk.Cursor.new_for_display(
                     Gdk.Display.get_default(), Gdk.CursorType.BLANK_CURSOR)
        self.get_window().set_cursor(cursor)
        return False

# run app
metarace.init()
win = laptrack()
win.start_io()
win.connect("destroy", Gtk.main_quit)
GLib.timeout_add_seconds(2, win.timeout, None)
GLib.timeout_add_seconds(4, win.maxitup, None)
win.show_all()
Gtk.main()
