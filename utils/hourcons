#!/usr/bin/python3
#
# Minimal hour record judges console to display epalsed time
# lap count, current speed and estimated final distance.
#

import gi
import logging
import metarace
from metarace import telegraph
from metarace import tod

gi.require_version("GLib", "2.0")
from gi.repository import GLib
gi.require_version("Gtk", "3.0")
from gi.repository import Gtk
gi.require_version("Gdk", "3.0")
from gi.repository import Gdk

logging.basicConfig()
LOG = logging.getLogger('metarace.hourcons')
LOG.setLevel(logging.DEBUG)

# font CSS
TOPLBLFONT = b'* { font-size: 240px; font-weight: bold; font-family: "Tex Gyre Heros Cn"; }'
BOTLBLFONT = b'* { font-size: 100px; font-weight: bold; font-family: "Tex Gyre Heros Cn"; }'

# topics to subscribe to
DATAKEYS = [ 'lapcount', 'elapsed', 'curspeed', 'projection', 'distance', ]

# main window object
class hourcons(Gtk.Window):
    def __init__(self):
        Gtk.Window.__init__(self, title="Laptrack")
        self.set_default_size(800,400)
        vbox = Gtk.Box(orientation=Gtk.Orientation.VERTICAL)
        self.add(vbox)

        self.toplabel = Gtk.Label()
        self.toplabel.set_single_line_mode(True)
        vbox.pack_start(self.toplabel, True, True, 0)

        self.botlabel = Gtk.Label()
        self.botlabel.set_single_line_mode(True)
        vbox.pack_start(self.botlabel, True, True, 0)
 
        # Create a temporary provider to style the labels
        p = Gtk.CssProvider()
        p.load_from_data(TOPLBLFONT)
        self.toplabel.get_style_context().add_provider(p,
                         Gtk.STYLE_PROVIDER_PRIORITY_USER)
        p = Gtk.CssProvider()
        p.load_from_data(BOTLBLFONT)
        self.botlabel.get_style_context().add_provider(p,
                         Gtk.STYLE_PROVIDER_PRIORITY_USER)

        # read configuration from system (use the laptrack config)
        self.fs = True
        if metarace.sysconf.has_option('laptrack', 'fullscreen'):
            self.fs = metarace.sysconf.get('laptrack', 'fullscreen')

        # create telegraph I/O object and callback
        self.t = telegraph.telegraph()
        self.t.setcb(self.io_msg)

        # initialise data values
        self.lapcount = None
        self.elapsed = None
        self.curspeed = None
        self.projection = None
        self.distance = None

        # subscribe to datakey sources
        for t in DATAKEYS:
            self.t.subscribe('/'.join(['metarace',t]))

        # clear display
        self.settoptext()
        self.setbottext()

    def io_msg(self, topic, message):
        """Receive message from telegraph and dispatch to main loop."""
        datakey = topic.split('/')[-1]
        #LOG.debug('new message %r: %r', datakey, msg)
        if datakey == 'lapcount':
            GLib.idle_add(self.setlap,msg)
        elif datakey == 'elapsed':
            GLib.idle_add(self.setelapsed,msg)
        elif datakey == 'curspeed':
            GLib.idle_add(self.setcurspeed,msg)
        elif datakey == 'projection':
            GLib.idle_add(self.setprojection,msg)
        elif datakey == 'distance':
            GLib.idle_add(self.setdistance,msg)
        else:
            pass
            #LOG.debug('ignore unknown datakey: %r', datakey)

    def settoptext(self):
        """Use data keys to set topline text."""
        if self.distance is not None:
            self.toplabel.set_text('{0:0.3f}\u2006km'.format(self.distance/1000))
        else:
            if self.elapsed is not None and self.lapcount is not None:
                if self.elapsed < 600:	# < 10:00
                    self.toplabel.set_text('\u2007{0}  {1:{2}>3d}'.format(
                          self.elapsed.minsec(), self.lapcount, '\u2007'))
                else:
                    self.toplabel.set_text('{0}  {1:{2}>3d}'.format(
                          self.elapsed.minsec(), self.lapcount, '\u2007'))
            else:
                self.toplabel.set_text('\u20070:00  \u2007\u20070')

    def setbottext(self):
        if self.distance is not None:
            self.botlabel.set_text('')
        else:
            if self.curspeed is not None:
                if self.projection is not None:
                    self.botlabel.set_text('{0}\u2006km/h  Est: {1:0.2f}\u2006km'.format(self.curspeed, self.projection/1000))
                else:
                    self.botlabel.set_text('{}\u2006km/h'.format(self.curspeed))
            else:
                self.botlabel.set_text('')

    def setlap(self, msg):
        nl = None
        try:
            if msg:
                nl = int(msg)
        except Exception as e:
            LOG.error('%s converting lap: %s', e.__class__.__name__, e)
        self.lapcount = nl
        if self.distance is None:
            self.settoptext()

    def setelapsed(self, msg):
        self.elapsed = tod.mktod(msg)
        if self.distance is None:
            self.settoptext()

    def setcurspeed(self, msg):
        ns = None
        if msg:
            ns = msg
        self.curspeed = ns
        if self.distance is None:
            self.setbottext()

    def setprojection(self, msg):
        nd = None
        try:
            if msg:
                nd = int(msg)
        except Exception as e:
            LOG.error('%s converting projection: %s', e.__class__.__name__, e)
        self.projection = nd
        if self.distance is None:
            self.setbottext()

    def setdistance(self, msg):
        nd = None
        try:
            if msg:
                nd = int(msg)
        except Exception as e:
            LOG.error('%s converting distance: %s', e.__class__.__name__, e)
        self.distance = nd
        if self.distance is not None:
            self.settoptext()
            self.setbottext()

    def start_io(self):
        """Start telegraph connection."""
        self.t.start()

    def maxitup(self, data=None):
        """Make window full screen if configured and blank mouse pointer."""
        if self.fs:
            self.fullscreen()
        cursor = Gdk.Cursor.new_for_display(
                     Gdk.Display.get_default(), Gdk.CursorType.BLANK_CURSOR)
        self.get_window().set_cursor(cursor)
        return False

# run app
metarace.init()
win = hourcons()
win.start_io()
win.connect("destroy", Gtk.main_quit)
GLib.timeout_add_seconds(4, win.maxitup, None)
win.show_all()
Gtk.main()
